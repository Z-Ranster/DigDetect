
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
# Documentation --> https://tkdocs.com/index.html


from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
from pathlib import Path

import os
import time
import DDSerial
import sched
import kinematics

import tkinter as tk
# Explicit imports to satisfy Flake8

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path((os.getcwd() + r"\src\assets\frame0"))


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


class Application(tk.Frame):
    window = Tk()

    canvas = Canvas(
        window,
        bg="#232323",
        height=300,
        width=800,
        bd=0,
        highlightthickness=0,
        relief="ridge"
    )

    canvas.place(x=0, y=0)
    canvas.create_text(
        324.0,
        49.0,
        anchor="nw",
        text="GPS Location",
        fill="#D9D9D9",
        font=("Roboto", 15 * -1)
    )

    canvas.create_text(
        602.0,
        49.0,
        anchor="nw",
        text="Bucket Location",
        fill="#D9D9D9",
        font=("Roboto", 15 * -1)
    )

    canvas.create_text(
        19.0,
        49.0,
        anchor="nw",
        text="Serial Port",
        fill="#D9D9D9",
        font=("Roboto", 15 * -1)
    )

    canvas.create_text(
        352.0,
        15.0,
        anchor="nw",
        text="Dig Detect",
        fill="#D9D9D9",
        font=("Roboto Medium", 20 * -1)
    )

    entry_image_1 = PhotoImage(
        file=relative_to_assets("entry_1.png"))
    entry_bg_1 = canvas.create_image(
        167.5,
        60.0,
        image=entry_image_1
    )
    entry_1 = Entry(
        bd=0,
        bg="#D9D9D9",
        fg="#000716",
        highlightthickness=0
    )
    entry_1.place(
        x=122.0,
        y=49.0,
        width=91.0,
        height=20.0
    )

    button_image_1 = PhotoImage(
        file=relative_to_assets("button_1.png"))
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: app.updateSerialPorts(),
        relief="flat"
    )
    button_1.place(
        x=19.0,
        y=82.0,
        width=91.0,
        height=22.0
    )

    button_image_2 = PhotoImage(
        file=relative_to_assets("button_2.png"))
    button_2 = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: print("button_2 clicked"),
        relief="flat"
    )
    button_2.place(
        x=20.0,
        y=210.0,
        width=91.0,
        height=22.0
    )

    button_image_3 = PhotoImage(
        file=relative_to_assets("button_3.png"))
    button_3 = Button(
        image=button_image_3,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: print("button_3 clicked"),
        relief="flat"
    )
    button_3.place(
        x=19.0,
        y=178.0,
        width=91.0,
        height=22.0
    )

    button_image_4 = PhotoImage(
        file=relative_to_assets("button_4.png"))
    button_4 = Button(
        image=button_image_4,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: print("button_4 clicked"),
        relief="flat"
    )
    button_4.place(
        x=19.0,
        y=146.0,
        width=91.0,
        height=22.0
    )

    button_image_5 = PhotoImage(
        file=relative_to_assets("button_5.png"))
    button_5 = Button(
        image=button_image_5,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: print("button_5 clicked"),
        relief="flat"
    )
    button_5.place(
        x=20.0,
        y=113.0,
        width=91.0,
        height=22.0
    )

    button_image_6 = PhotoImage(
        file=relative_to_assets("button_6.png"))
    button_6 = Button(
        image=button_image_6,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: app.connectSerial(),
        relief="flat"
    )
    button_6.place(
        x=122.0,
        y=82.0,
        width=91.0,
        height=22.0
    )

    button_image_7 = PhotoImage(
        file=relative_to_assets("button_7.png"))
    button_7 = Button(
        image=button_image_7,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: app.disconnectSerial(),
        relief="flat"
    )
    button_7.place(
        x=123.0,
        y=113.0,
        width=91.0,
        height=22.0
    )

    image_image_1 = PhotoImage(
        file=relative_to_assets("image_1.png"))
    image_1 = canvas.create_image(
        374.0,
        186.0,
        image=image_image_1
    )

    canvas.create_rectangle(
        545.0,
        82.0,
        787.0,
        291.0,
        fill="#D9D9D9",
        outline="")

    canvas.create_rectangle(
        124.0,
        180.0,
        144.0,
        200.0,
        fill="#D9D9D9",
        outline="")

    canvas.create_rectangle(
        124.0,
        212.0,
        144.0,
        232.0,
        fill="#D9D9D9",
        outline="")
    # canvas = Canvas(
    #     window,
    #     bg="#232323",
    #     height=400,
    #     width=800,
    #     bd=0,
    #     highlightthickness=0,
    #     relief="ridge"
    # )

    # canvas.place(x=0, y=0)
    # canvas.create_text(
    #     324.0,
    #     49.0,
    #     anchor="nw",
    #     text="GPS Location",
    #     fill="#D9D9D9",
    #     font=("Roboto", 15 * -1)
    # )

    # canvas.create_text(
    #     602.0,
    #     49.0,
    #     anchor="nw",
    #     text="Bucket Location",
    #     fill="#D9D9D9",
    #     font=("Roboto", 15 * -1)
    # )

    # canvas.create_text(
    #     19.0,
    #     49.0,
    #     anchor="nw",
    #     text="Serial Port",
    #     fill="#D9D9D9",
    #     font=("Roboto", 15 * -1)
    # )

    # canvas.create_text(
    #     19.0,
    #     85.0,
    #     anchor="nw",
    #     text="Baud Rate",
    #     fill="#D9D9D9",
    #     font=("Roboto", 15 * -1)
    # )

    # canvas.create_text(
    #     352.0,
    #     15.0,
    #     anchor="nw",
    #     text="Dig Detect",
    #     fill="#D9D9D9",
    #     font=("Roboto Medium", 20 * -1)
    # )

    # entry_image_1 = PhotoImage(
    #     file=relative_to_assets("entry_1.png"))
    # entry_bg_1 = canvas.create_image(
    #     113.0,
    #     256.0,
    #     image=entry_image_1
    # )
    # entry_1 = Text(
    #     bd=0,
    #     bg="#D9D9D9",
    #     fg="#000716",
    #     highlightthickness=0
    # )
    # a = entry_1.place(
    #     x=13.0,
    #     y=221.0,
    #     width=200.0,
    #     height=68.0
    # )

    # entry_image_2 = PhotoImage(
    #     file=relative_to_assets("entry_2.png"))
    # entry_bg_2 = canvas.create_image(
    #     167.5,
    #     96.0,
    #     image=entry_image_2
    # )
    # entry_2 = Entry(
    #     bd=0,
    #     bg="#D9D9D9",
    #     fg="#000716",
    #     highlightthickness=0
    # )
    # entry_2.place(
    #     x=122.0,
    #     y=85.0,
    #     width=91.0,
    #     height=20.0
    # )

    # entry_image_3 = PhotoImage(
    #     file=relative_to_assets("entry_3.png"))
    # entry_bg_3 = canvas.create_image(
    #     167.5,
    #     60.0,
    #     image=entry_image_3
    # )
    # entry_3 = Entry(
    #     bd=0,
    #     bg="#D9D9D9",
    #     fg="#000716",
    #     highlightthickness=0
    # )
    # entry_3.place(
    #     x=122.0,
    #     y=49.0,
    #     width=91.0,
    #     height=20.0
    # )

    # canvas.create_text(
    #     37.0,
    #     199.0,
    #     anchor="nw",
    #     text="Serial Communication",
    #     fill="#D9D9D9",
    #     font=("Roboto", 15 * -1)
    # )

    # button_image_1 = PhotoImage(
    #     file=relative_to_assets("button_1.png"))
    # button_1 = Button(
    #     image=button_image_1,
    #     borderwidth=0,
    #     highlightthickness=0,
    #     command=lambda: app.updateSerialPorts(),
    #     relief="flat"
    # )
    # button_1.place(
    #     x=13.0,
    #     y=128.0,
    #     width=91.0,
    #     height=22.0
    # )

    # button_image_2 = PhotoImage(
    #     file=relative_to_assets("button_2.png"))
    # button_2 = Button(
    #     image=button_image_2,
    #     borderwidth=0,
    #     highlightthickness=0,
    #     command=lambda: print("button_2 clicked"),
    #     relief="flat"
    # )
    # button_2.place(
    #     x=240.0,
    #     y=366.0,
    #     width=91.0,
    #     height=22.0
    # )

    # button_image_3 = PhotoImage(
    #     file=relative_to_assets("button_3.png"))
    # button_3 = Button(
    #     image=button_image_3,
    #     borderwidth=0,
    #     highlightthickness=0,
    #     command=lambda: print("button_3 clicked"),
    #     relief="flat"
    # )
    # button_3.place(
    #     x=240.0,
    #     y=333.0,
    #     width=91.0,
    #     height=22.0
    # )

    # button_image_4 = PhotoImage(
    #     file=relative_to_assets("button_4.png"))
    # button_4 = Button(
    #     image=button_image_4,
    #     borderwidth=0,
    #     highlightthickness=0,
    #     command=lambda: print("button_4 clicked"),
    #     relief="flat"
    # )
    # button_4.place(
    #     x=13.0,
    #     y=333.0,
    #     width=91.0,
    #     height=22.0
    # )

    # button_image_5 = PhotoImage(
    #     file=relative_to_assets("button_5.png"))
    # button_5 = Button(
    #     image=button_image_5,
    #     borderwidth=0,
    #     highlightthickness=0,
    #     command=lambda: app.visualizeModel(),
    #     relief="flat"
    # )
    # button_5.place(
    #     x=13.0,
    #     y=163.0,
    #     width=91.0,
    #     height=22.0
    # )

    # button_image_6 = PhotoImage(
    #     file=relative_to_assets("button_6.png"))
    # button_6 = Button(
    #     image=button_image_6,
    #     borderwidth=0,
    #     highlightthickness=0,
    #     command=lambda: app.connectSerial(),
    #     relief="flat"
    # )
    # button_6.place(
    #     x=122.0,
    #     y=128.0,
    #     width=91.0,
    #     height=22.0
    # )

    # button_image_7 = PhotoImage(
    #     file=relative_to_assets("button_7.png"))
    # button_7 = Button(
    #     image=button_image_7,
    #     borderwidth=0,
    #     highlightthickness=0,
    #     command=lambda: app.disconnectSerial(),
    #     relief="flat"
    # )
    # button_7.place(
    #     x=122.0,
    #     y=163.0,
    #     width=91.0,
    #     height=22.0
    # )

    # image_image_1 = PhotoImage(
    #     file=relative_to_assets("image_1.png"))
    # image_1 = canvas.create_image(
    #     374.0,
    #     186.0,
    #     image=image_image_1
    # )

    # canvas.create_rectangle(
    #     545.0,
    #     82.0,
    #     787.0,
    #     291.0,
    #     fill="#D9D9D9",
    #     outline="")

    # canvas.create_rectangle(
    #     -4.98468017578125,
    #     313.5,
    #     800.0153198242188,
    #     318.5,
    #     fill="#FFFFFF",
    #     outline="")

    # canvas.create_rectangle(
    #     342.0,
    #     335.0,
    #     362.0,
    #     355.0,
    #     fill="#D9D9D9",
    #     outline="")

    # canvas.create_rectangle(
    #     342.0,
    #     368.0,
    #     362.0,
    #     388.0,
    #     fill="#D9D9D9",
    #     outline="")

    def updateSerialPorts(self):
        DDSerial.updateSerialPorts()

    def visualizeModel(self):
        kinematics.visualizeKM()

    def connectSerial(self):
        # print(app.entry_1.get(0))
        # DDSerial.selected_SerialPort = app.entry_1.get(self, 0)
        DDSerial.startSerial()

    def disconnectSerial(self):
        DDSerial.closeSerial()

    def updateData(self):
        # Read Data
        if DDSerial.ser.is_open:
            deg = DDSerial.readSerial()
            # Update Kinematics
            # kinematics.calculateAngle(deg)

    def on_close(self):
        print("Serial is ending...")
        DDSerial.closeSerial()
        print("Window is closing...")
        # Close the tkinter window
        # self.window.destroy()
        # Stop both threads
        print("Done closing everything...")

    # This is the function that will be updating all of the gui elements.
    def refreshTimer(self):
        # Get the current time
        current_time = time.strftime("%H:%M:%S")
        self.updateData()
        # Schedule the refreshTimer() method to be called again in 1 second
        self.after(10, self.refreshTimer)


if __name__ == "__main__":
    # Define a tkinter window
    app = Application()
    app.master.title("Dig Detect Desktop")
    # app.master.protocol("WM_DELETE_WINDOW", app.on_close())

    app.master.geometry("800x300")
    app.master.configure(bg="#232323")
    app.master.resizable(False, False)
    app.refreshTimer()
    app.mainloop()
